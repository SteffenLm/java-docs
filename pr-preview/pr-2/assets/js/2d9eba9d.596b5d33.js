"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[6070],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>g});var r=i(7294);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function t(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,r)}return i}function s(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?t(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):t(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,r,a=function(e,n){if(null==e)return{};var i,r,a={},t=Object.keys(e);for(r=0;r<t.length;r++)i=t[r],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)i=t[r],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var o=r.createContext({}),m=function(e){var n=r.useContext(o),i=n;return e&&(i="function"==typeof e?e(n):s(s({},n),e)),i},c=function(e){var n=m(e.components);return r.createElement(o.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var i=e.components,a=e.mdxType,t=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(i),u=a,g=d["".concat(o,".").concat(u)]||d[u]||p[u]||t;return i?r.createElement(g,s(s({ref:n},c),{},{components:i})):r.createElement(g,s({ref:n},c))}));function g(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var t=i.length,s=new Array(t);s[0]=u;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[d]="string"==typeof e?e:a,s[1]=l;for(var m=2;m<t;m++)s[m]=i[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,i)}u.displayName="MDXCreateElement"},3418:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>m});var r=i(7462),a=(i(7294),i(3905));const t={title:"Zoo",description:"",tags:["oo","enumerations","inheritance","polymorphy"]},s=void 0,l={unversionedId:"exam-exercises/exam-exercises-java1/zoo",id:"exam-exercises/exam-exercises-java1/zoo",title:"Zoo",description:"",source:"@site/docs/exam-exercises/exam-exercises-java1/zoo.md",sourceDirName:"exam-exercises/exam-exercises-java1",slug:"/exam-exercises/exam-exercises-java1/zoo",permalink:"/java-docs/pr-preview/pr-2/exam-exercises/exam-exercises-java1/zoo",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exam-exercises/exam-exercises-java1/zoo.md",tags:[{label:"oo",permalink:"/java-docs/pr-preview/pr-2/tags/oo"},{label:"enumerations",permalink:"/java-docs/pr-preview/pr-2/tags/enumerations"},{label:"inheritance",permalink:"/java-docs/pr-preview/pr-2/tags/inheritance"},{label:"polymorphy",permalink:"/java-docs/pr-preview/pr-2/tags/polymorphy"}],version:"current",frontMatter:{title:"Zoo",description:"",tags:["oo","enumerations","inheritance","polymorphy"]},sidebar:"examExercisesSidebar",previous:{title:"Kurs",permalink:"/java-docs/pr-preview/pr-2/exam-exercises/exam-exercises-java1/student-course"},next:{title:"Programmierung 2",permalink:"/java-docs/pr-preview/pr-2/exam-exercises/exam-exercises-java2/"}},o={},m=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Allgemeine Hinweise",id:"allgemeine-hinweise",level:2},{value:"Hinweis zur Klasse Bird",id:"hinweis-zur-klasse-bird",level:2},{value:"Hinweis zur Klasse Mammal",id:"hinweis-zur-klasse-mammal",level:2},{value:"Hinweis zur Klasse Fish",id:"hinweis-zur-klasse-fish",level:2},{value:"Hinweise zur Klasse Zoo",id:"hinweise-zur-klasse-zoo",level:2}],c={toc:m},d="wrapper";function p(e){let{components:n,...i}=e;return(0,a.kt)(d,(0,r.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Setze das abgebildete Klassendiagramm vollst\xe4ndig um. Erstelle zum Testen eine\nausf\xfchrbare Klasse."),(0,a.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,a.kt)("mermaid",{value:"classDiagram\n    Zoo o-- Animal\n    Animal <|-- Mammal\n    Animal <|-- Bird\n    Animal <|-- Fish\n\n    class Zoo {\n        -name String\n        -animals List~Animal~\n        +Zoo(name String, animals List~Animal~)\n        +addAnimal(animal Animal) void\n        +getBiggestAnimal() Animal\n        +getFishesByColor(color String) List~Fish~\n    }\n\n    class Animal {\n        -description String\n        -sizeInM double\n        -weigthInKG double\n        +Animal(description String, sizeInM double, weigthInKG double)\n    }\n\n    class Mammal {\n        +Mammal(description String, sizeInM double, weigthInKG double)\n        +suckle() void\n    }\n\n    class Bird {\n        +Bird(description String, sizeInM double, weigthInKG double)\n        +fly() void\n    }\n\n    class Fish {\n        +Fish(description String, sizeInM double, weigthInKG double)\n        +swim() void\n    }"}),(0,a.kt)("h2",{id:"allgemeine-hinweise"},"Allgemeine Hinweise"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Aus Gr\xfcnden der \xdcbersicht werden im Klassendiagramm keine Getter und\nObject-Methoden dargestellt"),(0,a.kt)("li",{parentName:"ul"},"So nicht anders angegeben, sollen Konstruktoren, Setter, Getter sowie die\nObject-Methoden wie gewohnt implementiert werden")),(0,a.kt)("h2",{id:"hinweis-zur-klasse-bird"},"Hinweis zur Klasse Bird"),(0,a.kt)("p",null,"Die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void fly()")," soll die Zeichenkette ",(0,a.kt)("em",{parentName:"p"},"flatter, flatter")," ausgeben."),(0,a.kt)("h2",{id:"hinweis-zur-klasse-mammal"},"Hinweis zur Klasse Mammal"),(0,a.kt)("p",null,"Die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void suckle()")," soll die Zeichenkette ",(0,a.kt)("em",{parentName:"p"},"saug, saug")," ausgeben."),(0,a.kt)("h2",{id:"hinweis-zur-klasse-fish"},"Hinweis zur Klasse Fish"),(0,a.kt)("p",null,"Die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void swim()")," soll die Zeichenkette ",(0,a.kt)("em",{parentName:"p"},"schwimm, schwimm")," ausgeben."),(0,a.kt)("h2",{id:"hinweise-zur-klasse-zoo"},"Hinweise zur Klasse Zoo"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void addAnimal(animal: Animal)")," soll dem Zoo das eingehende Tier\nhinzuf\xfcgen"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"Animal getBiggestAnimal()")," soll das gr\xf6\xdfte Tier des Zoos\nzur\xfcckgeben"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"List<Fish> getFishesByColor(color: String)")," soll alle Fische des\nZoos zur eingehenden Farbe zur\xfcckgeben")))}p.isMDXComponent=!0}}]);